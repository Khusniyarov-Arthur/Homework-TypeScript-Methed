// Написал то что требуется в задании, но я не понимаю зачем мне это нужно.
// Прочитав данной задание у меня в голове не складывается картинка 
// того что я должен получить в итоге. Поэтому то что написано в классе Job 
// написано просто по заданию 1
class Job {
  // тут я декларирую переменные и задаю им тип
  private role: string;
  private _salary: number;

  // тут в конструкторе я описываю будущий объект который 
  // будет создан на основе данного класса
  constructor(role: string, salary: number) {
    this.role = role;
    this._salary = salary;
  }

  // Написал потому что просили, я не понимаю зачем не он вообще нужен.
  // Я понимаю что гетер получает значение salary, а вот для чего мне это нужно я не понимаю.
  get salary() {
    return this._salary;
  }

  // Тоже непонятно зачем мне этом метод, да он выводит в консоль что кто то сейчас работает под какой то ролью.
  work(personName: string) {
    console.log(`${personName} сейчас работает как ${this.role}`);
  }
}

// Так же не понимаю зачем мне этот класс, да я создам класс Persona, 
// но по заданию он не экстендится с Job, и зачем то тут есть переменная job
class Persona {
  private _job?: string;
  private name?: string;

  // описываю конструктор который может содержать name, 
  constructor(name?: string) {
    this.name = name;
  }
// так же не понимаю зачем мне это сетер, почему в конструкторе нет job
  set job (job: string) {
    this._job = job;
  }
  // так же не понимаю зачем мне это метод, случайно тыкаясь обратился к классу  Job
  // про прототип и взял оттуда salary. больше я не знаю как и откуда взять этот salary
  // 
  getSalary() {
    if(this._job) {
      return Job.prototype.salary
    }
    return;
  }

}

// Тут я пытался наследовать свойства от сласса Job. В таком варианте проще обратится
//  к salary через super, но я не могу описать аргументы super в конструкторе
// все время ошибка, не принимает мои аргументы, из теории в super нужно передовать аргументы
//  конструктора родителя, но это почему то не работает
class Persona1 extends Job {
  private _job?: string;
  private name?: string;

  // описываю конструктор который может содержать name, 
  constructor(name?: string) {
    super(role, salary)
    this.name = name;
  }

  set job (job: string) {
    this._job = job;
  }

  getSalary() {
    if(this._job) {
      return super.salary
    }
    return;
  }

}

// в уроке делали что то похожее создал объект с ролями и зарплатой
const works: {
  role: string;
  salary: number;
}[] = [
  { role: 'Manager1', salary: 100 },
  { role: 'Manager2', salary: 200 },
  { role: 'Manager3', salary: 300 },
]

// на основе предыдущего объекта используя экземпляр класса Job создал объекты
// и вывел в консоль
const worksList = works.map(item => new Job(item.role, item.salary))
console.log(worksList);

// создал person1 и вывел в консоль
const person1 = new Persona('jopa');
console.log('person1: ', person1);

// Что самое печальное я до сих пор не понимаю это задание. Что от меня требуется?
// Второе задание которое идет после первого еще хуже.
// Мне эти задания кажутся абсурдными и нелогичными. Я пишу то сам не знаю что и зачем.
// Как в сказке "Пойди туда незнаю куда принеси мне то незнаю что"
// Например когда и писал итоговую работу по реакт я мог в голове выстроить логику
// что должно происходить на том или ином этапе, какой хук импользовать и для чего именно.
// А тут этого нет, ну или я не вижу этого. 